const { execSync, spawn } = require('child_process');
const fs = require('fs');
const path = require('path');
const https = require('https');
const { createWriteStream } = require('fs');

console.log('üöÄ Instalador autom√°tico de Java para GestoTeam...');

// Configuraci√≥n de Java a instalar
const JAVA_CONFIG = {
  version: '17.0.12',
  url: 'https://download.oracle.com/java/17/latest/jdk-17_windows-x64_bin.exe',
  filename: 'jdk-17_windows-x64_bin.exe',
  installPath: 'C:\\Program Files\\Java\\jdk-17',
  silentInstall: true
};

// Funci√≥n para verificar si Java ya est√° instalado
function isJavaInstalled() {
  try {
    const result = execSync('java -version', { 
      stdio: 'pipe',
      timeout: 5000,
      windowsHide: true
    });
    console.log('‚úÖ Java ya est√° instalado en el sistema:');
    console.log(result.toString());
    return true;
  } catch (error) {
    return false;
  }
}

// Funci√≥n para descargar archivo
function downloadFile(url, filename) {
  return new Promise((resolve, reject) => {
    console.log(`üì• Descargando Java desde: ${url}`);
    
    const file = createWriteStream(filename);
    const request = https.get(url, (response) => {
      if (response.statusCode === 200) {
        response.pipe(file);
        file.on('finish', () => {
          file.close();
          console.log(`‚úÖ Descarga completada: ${filename}`);
          resolve(filename);
        });
      } else {
        reject(new Error(`Error HTTP: ${response.statusCode}`));
      }
    });
    
    request.on('error', (err) => {
      reject(err);
    });
    
    file.on('error', (err) => {
      reject(err);
    });
  });
}

// Funci√≥n para instalar Java
function installJava(installerPath) {
  return new Promise((resolve, reject) => {
    console.log('üîß Instalando Java...');
    
    const installArgs = [
      '/s', // Instalaci√≥n silenciosa
      '/v', // Variables de instalaci√≥n
      `INSTALLDIR=${JAVA_CONFIG.installPath}`,
      'ADDLOCAL=FeatureMain,FeatureEnvironment,FeatureJarFileRunWith,FeatureJavaHome',
      'AUTO_UPDATE=0', // No actualizaciones autom√°ticas
      'EULA=1' // Aceptar licencia
    ];
    
    const installer = spawn(installerPath, installArgs, {
      stdio: 'pipe',
      windowsHide: true
    });
    
    installer.stdout.on('data', (data) => {
      console.log(`Instalador: ${data.toString().trim()}`);
    });
    
    installer.stderr.on('data', (data) => {
      console.log(`Error instalador: ${data.toString().trim()}`);
    });
    
    installer.on('close', (code) => {
      if (code === 0) {
        console.log('‚úÖ Java instalado correctamente');
        resolve();
      } else {
        reject(new Error(`Instalador termin√≥ con c√≥digo: ${code}`));
      }
    });
    
    installer.on('error', (error) => {
      reject(error);
    });
  });
}

// Funci√≥n para configurar variables de entorno
function configureEnvironment() {
  try {
    console.log('‚öôÔ∏è Configurando variables de entorno...');
    
    // Configurar JAVA_HOME
    const javaHome = JAVA_CONFIG.installPath;
    execSync(`setx JAVA_HOME "${javaHome}"`, { 
      stdio: 'pipe',
      windowsHide: true
    });
    console.log(`‚úÖ JAVA_HOME configurado: ${javaHome}`);
    
    // Agregar Java al PATH
    const javaBin = path.join(javaHome, 'bin');
    const currentPath = process.env.PATH || '';
    
    if (!currentPath.includes(javaBin)) {
      const newPath = `${javaBin};${currentPath}`;
      execSync(`setx PATH "${newPath}"`, { 
        stdio: 'pipe',
        windowsHide: true
      });
      console.log('‚úÖ Java agregado al PATH del sistema');
    } else {
      console.log('‚úÖ Java ya est√° en el PATH');
    }
    
    return true;
  } catch (error) {
    console.log(`‚ùå Error configurando variables de entorno: ${error.message}`);
    return false;
  }
}

// Funci√≥n para verificar instalaci√≥n
function verifyInstallation() {
  try {
    console.log('üîç Verificando instalaci√≥n...');
    
    // Verificar que el ejecutable existe
    const javaExe = path.join(JAVA_CONFIG.installPath, 'bin', 'java.exe');
    if (!fs.existsSync(javaExe)) {
      throw new Error('java.exe no encontrado despu√©s de la instalaci√≥n');
    }
    
    // Verificar que se puede ejecutar
    const result = execSync(`"${javaExe}" -version`, { 
      stdio: 'pipe',
      timeout: 10000,
      windowsHide: true
    });
    
    console.log('‚úÖ Verificaci√≥n exitosa:');
    console.log(result.toString());
    return true;
  } catch (error) {
    console.log(`‚ùå Error en verificaci√≥n: ${error.message}`);
    return false;
  }
}

// Funci√≥n principal
async function main() {
  try {
    console.log('=====================================');
    console.log('INSTALADOR AUTOM√ÅTICO DE JAVA');
    console.log('=====================================');
    
    // 1. Verificar si ya est√° instalado
    if (isJavaInstalled()) {
      console.log('\nüéâ Java ya est√° instalado y funcionando!');
      return;
    }
    
    // 2. Descargar instalador
    console.log('\nüì• Descargando Java...');
    const installerPath = await downloadFile(JAVA_CONFIG.url, JAVA_CONFIG.filename);
    
    // 3. Instalar Java
    console.log('\nüîß Instalando Java...');
    await installJava(installerPath);
    
    // 4. Configurar variables de entorno
    console.log('\n‚öôÔ∏è Configurando sistema...');
    if (!configureEnvironment()) {
      throw new Error('No se pudieron configurar las variables de entorno');
    }
    
    // 5. Verificar instalaci√≥n
    console.log('\nüîç Verificando instalaci√≥n...');
    if (!verifyInstallation()) {
      throw new Error('La instalaci√≥n no se verific√≥ correctamente');
    }
    
    // 6. Limpiar archivos temporales
    try {
      fs.unlinkSync(installerPath);
      console.log('üßπ Archivos temporales eliminados');
    } catch (error) {
      console.log('‚ö†Ô∏è No se pudieron eliminar archivos temporales');
    }
    
    console.log('\nüéâ Java instalado y configurado correctamente!');
    console.log('\nüí° IMPORTANTE:');
    console.log('   - Reinicia la aplicaci√≥n para que los cambios surtan efecto');
    console.log('   - Si tienes problemas, reinicia el sistema');
    console.log('   - Java est√° configurado en: ' + JAVA_CONFIG.installPath);
    
  } catch (error) {
    console.log(`\n‚ùå Error durante la instalaci√≥n: ${error.message}`);
    console.log('\nüîß SOLUCIONES MANUALES:');
    console.log('   1. Descarga Java manualmente desde: https://adoptium.net/');
    console.log('   2. Instala Java 17 o superior');
    console.log('   3. Configura JAVA_HOME y PATH manualmente');
    console.log('   4. Reinicia el sistema');
    
    process.exit(1);
  }
}

// Ejecutar instalador
main();
